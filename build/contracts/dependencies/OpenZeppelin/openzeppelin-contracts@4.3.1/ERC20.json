{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
    "1": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/IERC20.sol",
    "2": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "3": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
    "exportedSymbols": {
      "Context": [
        696
      ],
      "ERC20": [
        571
      ],
      "IERC20": [
        649
      ],
      "IERC20Metadata": [
        674
      ]
    },
    "id": 572,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 27,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:0"
      },
      {
        "absolutePath": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/IERC20.sol",
        "file": "./IERC20.sol",
        "id": 28,
        "nodeType": "ImportDirective",
        "scope": 572,
        "sourceUnit": 650,
        "src": "58:22:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "file": "./extensions/IERC20Metadata.sol",
        "id": 29,
        "nodeType": "ImportDirective",
        "scope": 572,
        "sourceUnit": 675,
        "src": "81:41:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/utils/Context.sol",
        "file": "../../utils/Context.sol",
        "id": 30,
        "nodeType": "ImportDirective",
        "scope": 572,
        "sourceUnit": 697,
        "src": "123:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 32,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 696,
              "src": "1349:7:0"
            },
            "id": 33,
            "nodeType": "InheritanceSpecifier",
            "src": "1349:7:0"
          },
          {
            "baseName": {
              "id": 34,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 649,
              "src": "1358:6:0"
            },
            "id": 35,
            "nodeType": "InheritanceSpecifier",
            "src": "1358:6:0"
          },
          {
            "baseName": {
              "id": 36,
              "name": "IERC20Metadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 674,
              "src": "1366:14:0"
            },
            "id": 37,
            "nodeType": "InheritanceSpecifier",
            "src": "1366:14:0"
          }
        ],
        "contractDependencies": [
          649,
          674,
          696
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 31,
          "nodeType": "StructuredDocumentation",
          "src": "158:1172:0",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 571,
        "linearizedBaseContracts": [
          571,
          674,
          649,
          696
        ],
        "name": "ERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 41,
            "mutability": "mutable",
            "name": "_balances",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "1387:45:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 40,
              "keyType": {
                "id": 38,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1395:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1387:27:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 39,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1406:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 47,
            "mutability": "mutable",
            "name": "_allowances",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "1439:67:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 46,
              "keyType": {
                "id": 42,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1447:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1439:47:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 45,
                "keyType": {
                  "id": 43,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1466:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1458:27:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 44,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1477:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 49,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "1513:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 48,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1513:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 51,
            "mutability": "mutable",
            "name": "_name",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "1548:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 50,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1548:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 53,
            "mutability": "mutable",
            "name": "_symbol",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "1574:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 52,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1574:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 69,
              "nodeType": "Block",
              "src": "1962:57:0",
              "statements": [
                {
                  "expression": {
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 61,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 51,
                      "src": "1972:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 62,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 56,
                      "src": "1980:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1972:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 64,
                  "nodeType": "ExpressionStatement",
                  "src": "1972:13:0"
                },
                {
                  "expression": {
                    "id": 67,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 65,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 53,
                      "src": "1995:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 66,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 58,
                      "src": "2005:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1995:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 68,
                  "nodeType": "ExpressionStatement",
                  "src": "1995:17:0"
                }
              ]
            },
            "documentation": {
              "id": 54,
              "nodeType": "StructuredDocumentation",
              "src": "1603:298:0",
              "text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 70,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 59,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 56,
                  "mutability": "mutable",
                  "name": "name_",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1918:19:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 55,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1918:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nodeType": "VariableDeclaration",
                  "scope": 70,
                  "src": "1939:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1939:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1917:44:0"
            },
            "returnParameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1962:0:0"
            },
            "scope": 571,
            "src": "1906:113:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              661
            ],
            "body": {
              "id": 79,
              "nodeType": "Block",
              "src": "2153:29:0",
              "statements": [
                {
                  "expression": {
                    "id": 77,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 51,
                    "src": "2170:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 76,
                  "id": 78,
                  "nodeType": "Return",
                  "src": "2163:12:0"
                }
              ]
            },
            "documentation": {
              "id": 71,
              "nodeType": "StructuredDocumentation",
              "src": "2025:54:0",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 80,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 73,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2120:8:0"
            },
            "parameters": {
              "id": 72,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2097:2:0"
            },
            "returnParameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 75,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 80,
                  "src": "2138:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 74,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2138:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2137:15:0"
            },
            "scope": 571,
            "src": "2084:98:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              667
            ],
            "body": {
              "id": 89,
              "nodeType": "Block",
              "src": "2366:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 87,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 53,
                    "src": "2383:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 86,
                  "id": 88,
                  "nodeType": "Return",
                  "src": "2376:14:0"
                }
              ]
            },
            "documentation": {
              "id": 81,
              "nodeType": "StructuredDocumentation",
              "src": "2188:102:0",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 90,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 83,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2333:8:0"
            },
            "parameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2310:2:0"
            },
            "returnParameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 85,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 90,
                  "src": "2351:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 84,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2351:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2350:15:0"
            },
            "scope": 571,
            "src": "2295:102:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              673
            ],
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "3086:26:0",
              "statements": [
                {
                  "expression": {
                    "hexValue": "3138",
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3103:2:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "functionReturnParameters": 96,
                  "id": 98,
                  "nodeType": "Return",
                  "src": "3096:9:0"
                }
              ]
            },
            "documentation": {
              "id": 91,
              "nodeType": "StructuredDocumentation",
              "src": "2403:613:0",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 93,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3061:8:0"
            },
            "parameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3038:2:0"
            },
            "returnParameters": {
              "id": 96,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 95,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "3079:5:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 94,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3079:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3078:7:0"
            },
            "scope": 571,
            "src": "3021:91:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              580
            ],
            "body": {
              "id": 109,
              "nodeType": "Block",
              "src": "3242:36:0",
              "statements": [
                {
                  "expression": {
                    "id": 107,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 49,
                    "src": "3259:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 106,
                  "id": 108,
                  "nodeType": "Return",
                  "src": "3252:19:0"
                }
              ]
            },
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "3118:49:0",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 110,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 103,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3215:8:0"
            },
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3192:2:0"
            },
            "returnParameters": {
              "id": 106,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 105,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 110,
                  "src": "3233:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 104,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3233:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3232:9:0"
            },
            "scope": 571,
            "src": "3172:106:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              588
            ],
            "body": {
              "id": 123,
              "nodeType": "Block",
              "src": "3419:42:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 119,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "3436:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 121,
                    "indexExpression": {
                      "id": 120,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 113,
                      "src": "3446:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3436:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 118,
                  "id": 122,
                  "nodeType": "Return",
                  "src": "3429:25:0"
                }
              ]
            },
            "documentation": {
              "id": 111,
              "nodeType": "StructuredDocumentation",
              "src": "3284:47:0",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 124,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 115,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3392:8:0"
            },
            "parameters": {
              "id": 114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 113,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 124,
                  "src": "3355:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 112,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3355:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3354:17:0"
            },
            "returnParameters": {
              "id": 118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 117,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 124,
                  "src": "3410:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 116,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3410:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3409:9:0"
            },
            "scope": 571,
            "src": "3336:125:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              598
            ],
            "body": {
              "id": 144,
              "nodeType": "Block",
              "src": "3756:80:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 136,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 686,
                          "src": "3776:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3776:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 138,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 127,
                        "src": "3790:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 139,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 129,
                        "src": "3801:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 135,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 375,
                      "src": "3766:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3766:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 141,
                  "nodeType": "ExpressionStatement",
                  "src": "3766:42:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 142,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3825:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 134,
                  "id": 143,
                  "nodeType": "Return",
                  "src": "3818:11:0"
                }
              ]
            },
            "documentation": {
              "id": 125,
              "nodeType": "StructuredDocumentation",
              "src": "3467:192:0",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "a9059cbb",
            "id": 145,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 131,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3732:8:0"
            },
            "parameters": {
              "id": 130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 127,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "3682:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 126,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3682:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 129,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "3701:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 128,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3701:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3681:35:0"
            },
            "returnParameters": {
              "id": 134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 133,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 145,
                  "src": "3750:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 132,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3750:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3749:6:0"
            },
            "scope": 571,
            "src": "3664:172:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              608
            ],
            "body": {
              "id": 162,
              "nodeType": "Block",
              "src": "3992:51:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 156,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47,
                        "src": "4009:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 158,
                      "indexExpression": {
                        "id": 157,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 148,
                        "src": "4021:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4009:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 160,
                    "indexExpression": {
                      "id": 159,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 150,
                      "src": "4028:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4009:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 155,
                  "id": 161,
                  "nodeType": "Return",
                  "src": "4002:34:0"
                }
              ]
            },
            "documentation": {
              "id": 146,
              "nodeType": "StructuredDocumentation",
              "src": "3842:47:0",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 163,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 152,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3965:8:0"
            },
            "parameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 148,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 163,
                  "src": "3913:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 147,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3913:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 150,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 163,
                  "src": "3928:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 149,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3928:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3912:32:0"
            },
            "returnParameters": {
              "id": 155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 154,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 163,
                  "src": "3983:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 153,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3983:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3982:9:0"
            },
            "scope": 571,
            "src": "3894:149:0",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              618
            ],
            "body": {
              "id": 183,
              "nodeType": "Block",
              "src": "4270:77:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 175,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 686,
                          "src": "4289:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 176,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4289:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 177,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 166,
                        "src": "4303:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 178,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 168,
                        "src": "4312:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 174,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 548,
                      "src": "4280:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4280:39:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 180,
                  "nodeType": "ExpressionStatement",
                  "src": "4280:39:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4336:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 173,
                  "id": 182,
                  "nodeType": "Return",
                  "src": "4329:11:0"
                }
              ]
            },
            "documentation": {
              "id": 164,
              "nodeType": "StructuredDocumentation",
              "src": "4049:127:0",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 184,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 170,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4246:8:0"
            },
            "parameters": {
              "id": 169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 166,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 184,
                  "src": "4198:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 165,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4198:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 168,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 184,
                  "src": "4215:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 167,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4215:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4197:33:0"
            },
            "returnParameters": {
              "id": 173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 172,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 184,
                  "src": "4264:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 171,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4264:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4263:6:0"
            },
            "scope": 571,
            "src": "4181:166:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              630
            ],
            "body": {
              "id": 231,
              "nodeType": "Block",
              "src": "4956:336:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 198,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 187,
                        "src": "4976:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 199,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 189,
                        "src": "4984:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 200,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 191,
                        "src": "4995:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 197,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 375,
                      "src": "4966:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4966:36:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 202,
                  "nodeType": "ExpressionStatement",
                  "src": "4966:36:0"
                },
                {
                  "assignments": [
                    204
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 204,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 231,
                      "src": "5013:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 203,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5013:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 211,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 205,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47,
                        "src": "5040:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 207,
                      "indexExpression": {
                        "id": 206,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 187,
                        "src": "5052:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5040:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 210,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 208,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 686,
                        "src": "5060:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 209,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5060:12:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5040:33:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5013:60:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 215,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 213,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 204,
                          "src": "5091:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 214,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 191,
                          "src": "5111:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5091:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5119:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 212,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5083:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5083:79:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 218,
                  "nodeType": "ExpressionStatement",
                  "src": "5083:79:0"
                },
                {
                  "id": 228,
                  "nodeType": "UncheckedBlock",
                  "src": "5172:92:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 220,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 187,
                            "src": "5205:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 221,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "5213:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 222,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5213:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 225,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 223,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 204,
                              "src": "5227:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 224,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 191,
                              "src": "5246:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5227:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 219,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 548,
                          "src": "5196:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5196:57:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 227,
                      "nodeType": "ExpressionStatement",
                      "src": "5196:57:0"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5281:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 196,
                  "id": 230,
                  "nodeType": "Return",
                  "src": "5274:11:0"
                }
              ]
            },
            "documentation": {
              "id": 185,
              "nodeType": "StructuredDocumentation",
              "src": "4353:456:0",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 232,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 193,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4932:8:0"
            },
            "parameters": {
              "id": 192,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 187,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "4845:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 186,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4845:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 189,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "4869:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 188,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4869:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 191,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "4896:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 190,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4896:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4835:81:0"
            },
            "returnParameters": {
              "id": 196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 195,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 232,
                  "src": "4950:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 194,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4950:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4949:6:0"
            },
            "scope": 571,
            "src": "4814:478:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 258,
              "nodeType": "Block",
              "src": "5781:118:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 243,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 686,
                          "src": "5800:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 244,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5800:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 245,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 235,
                        "src": "5814:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 246,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 47,
                              "src": "5823:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 249,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 247,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 686,
                                "src": "5835:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 248,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5835:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5823:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 251,
                          "indexExpression": {
                            "id": 250,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 235,
                            "src": "5849:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5823:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 252,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 237,
                          "src": "5860:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5823:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 242,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 548,
                      "src": "5791:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5791:80:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 255,
                  "nodeType": "ExpressionStatement",
                  "src": "5791:80:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5888:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 241,
                  "id": 257,
                  "nodeType": "Return",
                  "src": "5881:11:0"
                }
              ]
            },
            "documentation": {
              "id": 233,
              "nodeType": "StructuredDocumentation",
              "src": "5298:384:0",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 259,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 238,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 235,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 259,
                  "src": "5714:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 234,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5714:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 237,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 259,
                  "src": "5731:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 236,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5731:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5713:37:0"
            },
            "returnParameters": {
              "id": 241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 240,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 259,
                  "src": "5775:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 239,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5775:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5774:6:0"
            },
            "scope": 571,
            "src": "5687:212:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 297,
              "nodeType": "Block",
              "src": "6485:306:0",
              "statements": [
                {
                  "assignments": [
                    270
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 270,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nodeType": "VariableDeclaration",
                      "scope": 297,
                      "src": "6495:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 269,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6495:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 277,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 271,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47,
                        "src": "6522:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 274,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 272,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 686,
                          "src": "6534:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6534:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6522:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 276,
                    "indexExpression": {
                      "id": 275,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 262,
                      "src": "6548:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6522:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6495:61:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 281,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 279,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 270,
                          "src": "6574:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 280,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 264,
                          "src": "6594:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6574:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6611:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 278,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6566:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6566:85:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 284,
                  "nodeType": "ExpressionStatement",
                  "src": "6566:85:0"
                },
                {
                  "id": 294,
                  "nodeType": "UncheckedBlock",
                  "src": "6661:102:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 286,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "6694:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6694:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 288,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 262,
                            "src": "6708:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 289,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 270,
                              "src": "6717:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 290,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 264,
                              "src": "6736:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6717:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 285,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 548,
                          "src": "6685:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 292,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6685:67:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 293,
                      "nodeType": "ExpressionStatement",
                      "src": "6685:67:0"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6780:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 268,
                  "id": 296,
                  "nodeType": "Return",
                  "src": "6773:11:0"
                }
              ]
            },
            "documentation": {
              "id": 260,
              "nodeType": "StructuredDocumentation",
              "src": "5905:476:0",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 298,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 265,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 262,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 298,
                  "src": "6413:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 261,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6413:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 264,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 298,
                  "src": "6430:23:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 263,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6430:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6412:42:0"
            },
            "returnParameters": {
              "id": 268,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 267,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 298,
                  "src": "6479:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 266,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6479:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6478:6:0"
            },
            "scope": 571,
            "src": "6386:405:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 374,
              "nodeType": "Block",
              "src": "7382:596:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 309,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 301,
                          "src": "7400:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 312,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7418:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7410:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 310,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7410:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7410:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7400:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7422:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 308,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7392:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 316,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7392:70:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 317,
                  "nodeType": "ExpressionStatement",
                  "src": "7392:70:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 324,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 319,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 303,
                          "src": "7480:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 322,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7501:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7493:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 320,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7493:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7493:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7480:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 325,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7505:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 318,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7472:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 326,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7472:71:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 327,
                  "nodeType": "ExpressionStatement",
                  "src": "7472:71:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 329,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "7575:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 330,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "7583:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 331,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 305,
                        "src": "7594:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 328,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 559,
                      "src": "7554:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 332,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7554:47:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 333,
                  "nodeType": "ExpressionStatement",
                  "src": "7554:47:0"
                },
                {
                  "assignments": [
                    335
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 335,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 374,
                      "src": "7612:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 334,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7612:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 339,
                  "initialValue": {
                    "baseExpression": {
                      "id": 336,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "7636:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 338,
                    "indexExpression": {
                      "id": 337,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 301,
                      "src": "7646:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7636:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7612:41:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 341,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 335,
                          "src": "7671:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 342,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 305,
                          "src": "7688:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7671:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 344,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7696:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 340,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7663:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 345,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7663:74:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 346,
                  "nodeType": "ExpressionStatement",
                  "src": "7663:74:0"
                },
                {
                  "id": 355,
                  "nodeType": "UncheckedBlock",
                  "src": "7747:77:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 353,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 347,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "7771:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 349,
                          "indexExpression": {
                            "id": 348,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "7781:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7771:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 352,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 350,
                            "name": "senderBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 335,
                            "src": "7791:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 351,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 305,
                            "src": "7807:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7791:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7771:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 354,
                      "nodeType": "ExpressionStatement",
                      "src": "7771:42:0"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 360,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 356,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "7833:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 358,
                      "indexExpression": {
                        "id": 357,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "7843:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7833:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 359,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 305,
                      "src": "7857:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7833:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 361,
                  "nodeType": "ExpressionStatement",
                  "src": "7833:30:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 363,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "7888:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 364,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "7896:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 365,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 305,
                        "src": "7907:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 362,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 639,
                      "src": "7879:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7879:35:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 367,
                  "nodeType": "EmitStatement",
                  "src": "7874:40:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 369,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 301,
                        "src": "7945:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 370,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 303,
                        "src": "7953:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 371,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 305,
                        "src": "7964:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 368,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 570,
                      "src": "7925:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 372,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7925:46:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 373,
                  "nodeType": "ExpressionStatement",
                  "src": "7925:46:0"
                }
              ]
            },
            "documentation": {
              "id": 299,
              "nodeType": "StructuredDocumentation",
              "src": "6797:463:0",
              "text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 375,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 306,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 301,
                  "mutability": "mutable",
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 375,
                  "src": "7293:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 300,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7293:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 303,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 375,
                  "src": "7317:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7317:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 305,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 375,
                  "src": "7344:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 304,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7344:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7283:81:0"
            },
            "returnParameters": {
              "id": 307,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7382:0:0"
            },
            "scope": 571,
            "src": "7265:713:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 430,
              "nodeType": "Block",
              "src": "8319:324:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 389,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 384,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 378,
                          "src": "8337:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 387,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8356:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 386,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8348:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 385,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8348:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 388,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8348:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8337:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 390,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8360:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 383,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8329:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 391,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8329:65:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 392,
                  "nodeType": "ExpressionStatement",
                  "src": "8329:65:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 396,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8434:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 395,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8426:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 394,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8426:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 397,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8426:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 398,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "8438:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 399,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 380,
                        "src": "8447:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 393,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 559,
                      "src": "8405:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 400,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8405:49:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 401,
                  "nodeType": "ExpressionStatement",
                  "src": "8405:49:0"
                },
                {
                  "expression": {
                    "id": 404,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 402,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49,
                      "src": "8465:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 403,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 380,
                      "src": "8481:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8465:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 405,
                  "nodeType": "ExpressionStatement",
                  "src": "8465:22:0"
                },
                {
                  "expression": {
                    "id": 410,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 406,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41,
                        "src": "8497:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 408,
                      "indexExpression": {
                        "id": 407,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "8507:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8497:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 409,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 380,
                      "src": "8519:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8497:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 411,
                  "nodeType": "ExpressionStatement",
                  "src": "8497:28:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 415,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8557:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8549:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 413,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8549:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 416,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8549:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 417,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "8561:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 418,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 380,
                        "src": "8570:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 412,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 639,
                      "src": "8540:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8540:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 420,
                  "nodeType": "EmitStatement",
                  "src": "8535:42:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 424,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8616:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8608:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 422,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8608:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 425,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8608:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 426,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "8620:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 427,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 380,
                        "src": "8629:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 421,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 570,
                      "src": "8588:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8588:48:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 429,
                  "nodeType": "ExpressionStatement",
                  "src": "8588:48:0"
                }
              ]
            },
            "documentation": {
              "id": 376,
              "nodeType": "StructuredDocumentation",
              "src": "7984:265:0",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
            },
            "id": 431,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 381,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 378,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 431,
                  "src": "8269:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8269:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 380,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 431,
                  "src": "8286:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 379,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8286:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8268:33:0"
            },
            "returnParameters": {
              "id": 382,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8319:0:0"
            },
            "scope": 571,
            "src": "8254:389:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 502,
              "nodeType": "Block",
              "src": "9028:511:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 440,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 434,
                          "src": "9046:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 443,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9065:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 442,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9057:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 441,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9057:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 444,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9057:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9046:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 446,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9069:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 439,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9038:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9038:67:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 448,
                  "nodeType": "ExpressionStatement",
                  "src": "9038:67:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 450,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 434,
                        "src": "9137:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 453,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9154:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9146:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 451,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9146:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9146:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 455,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "9158:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 449,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 559,
                      "src": "9116:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9116:49:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 457,
                  "nodeType": "ExpressionStatement",
                  "src": "9116:49:0"
                },
                {
                  "assignments": [
                    459
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 459,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nodeType": "VariableDeclaration",
                      "scope": 502,
                      "src": "9176:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 458,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9176:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 463,
                  "initialValue": {
                    "baseExpression": {
                      "id": 460,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "9201:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 462,
                    "indexExpression": {
                      "id": 461,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 434,
                      "src": "9211:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9201:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9176:43:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 467,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 465,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 459,
                          "src": "9237:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 466,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 436,
                          "src": "9255:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9237:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 468,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9263:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 464,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9229:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9229:71:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 470,
                  "nodeType": "ExpressionStatement",
                  "src": "9229:71:0"
                },
                {
                  "id": 479,
                  "nodeType": "UncheckedBlock",
                  "src": "9310:79:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 471,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "9334:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 473,
                          "indexExpression": {
                            "id": 472,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 434,
                            "src": "9344:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9334:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 476,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 474,
                            "name": "accountBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 459,
                            "src": "9355:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 475,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 436,
                            "src": "9372:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9355:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9334:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 478,
                      "nodeType": "ExpressionStatement",
                      "src": "9334:44:0"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 480,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49,
                      "src": "9398:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 481,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 436,
                      "src": "9414:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9398:22:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 483,
                  "nodeType": "ExpressionStatement",
                  "src": "9398:22:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 485,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 434,
                        "src": "9445:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 488,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9462:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9454:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 486,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9454:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 489,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9454:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 490,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "9466:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 484,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 639,
                      "src": "9436:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 491,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9436:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 492,
                  "nodeType": "EmitStatement",
                  "src": "9431:42:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 494,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 434,
                        "src": "9504:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9521:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9513:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 495,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9513:7:0",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9513:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 499,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "9525:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 493,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 570,
                      "src": "9484:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 500,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9484:48:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 501,
                  "nodeType": "ExpressionStatement",
                  "src": "9484:48:0"
                }
              ]
            },
            "documentation": {
              "id": 432,
              "nodeType": "StructuredDocumentation",
              "src": "8649:309:0",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 503,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 437,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 434,
                  "mutability": "mutable",
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 503,
                  "src": "8978:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 433,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8978:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 436,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 503,
                  "src": "8995:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8995:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8977:33:0"
            },
            "returnParameters": {
              "id": 438,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9028:0:0"
            },
            "scope": 571,
            "src": "8963:576:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 547,
              "nodeType": "Block",
              "src": "10075:257:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 519,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 514,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 506,
                          "src": "10093:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 517,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10110:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 516,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10102:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 515,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10102:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 518,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10102:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10093:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10114:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 513,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10085:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 521,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10085:68:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 522,
                  "nodeType": "ExpressionStatement",
                  "src": "10085:68:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 524,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 508,
                          "src": "10171:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 527,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10190:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 526,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10182:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 525,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10182:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10182:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10171:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10194:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 523,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10163:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 531,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10163:68:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 532,
                  "nodeType": "ExpressionStatement",
                  "src": "10163:68:0"
                },
                {
                  "expression": {
                    "id": 539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 533,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 47,
                          "src": "10242:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 536,
                        "indexExpression": {
                          "id": 534,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 506,
                          "src": "10254:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10242:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 537,
                      "indexExpression": {
                        "id": 535,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 508,
                        "src": "10261:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10242:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 538,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 510,
                      "src": "10272:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10242:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 540,
                  "nodeType": "ExpressionStatement",
                  "src": "10242:36:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 542,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 506,
                        "src": "10302:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 543,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 508,
                        "src": "10309:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 544,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 510,
                        "src": "10318:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 541,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 648,
                      "src": "10293:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 545,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10293:32:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 546,
                  "nodeType": "EmitStatement",
                  "src": "10288:37:0"
                }
              ]
            },
            "documentation": {
              "id": 504,
              "nodeType": "StructuredDocumentation",
              "src": "9545:412:0",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 548,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 511,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 506,
                  "mutability": "mutable",
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "9989:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 505,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9989:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 508,
                  "mutability": "mutable",
                  "name": "spender",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "10012:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 507,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10012:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 510,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "10037:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 509,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10037:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9979:78:0"
            },
            "returnParameters": {
              "id": 512,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10075:0:0"
            },
            "scope": 571,
            "src": "9962:370:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 558,
              "nodeType": "Block",
              "src": "11035:2:0",
              "statements": []
            },
            "documentation": {
              "id": 549,
              "nodeType": "StructuredDocumentation",
              "src": "10338:573:0",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 559,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 556,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 551,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "10955:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 550,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10955:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 553,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "10977:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 552,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10977:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 555,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "10997:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 554,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10997:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10945:72:0"
            },
            "returnParameters": {
              "id": 557,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11035:0:0"
            },
            "scope": 571,
            "src": "10916:121:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 569,
              "nodeType": "Block",
              "src": "11743:2:0",
              "statements": []
            },
            "documentation": {
              "id": 560,
              "nodeType": "StructuredDocumentation",
              "src": "11043:577:0",
              "text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 570,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterTokenTransfer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 570,
                  "src": "11663:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11663:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 564,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 570,
                  "src": "11685:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 563,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11685:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 566,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 570,
                  "src": "11705:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 565,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11705:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11653:72:0"
            },
            "returnParameters": {
              "id": 568,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11743:0:0"
            },
            "scope": 571,
            "src": "11625:120:0",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 572,
        "src": "1331:10416:0"
      }
    ],
    "src": "33:11715:0"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000c4038038062000c408339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6109bd80620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106dd565b60405180910390f35b6100df6100da3660046106a9565b610222565b6040516100c391906106d2565b6100f461023f565b6040516100c39190610911565b6100df61010f36600461066e565b610245565b61011c6102de565b6040516100c3919061091a565b6100df6101373660046106a9565b6102e3565b6100f461014a36600461061b565b610337565b6100b6610356565b6100df6101653660046106a9565b610365565b6100df6101783660046106a9565b6103de565b6100f461018b36600461063c565b6103f2565b60606003805461019f9061094c565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb9061094c565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f61041d565b8484610421565b50600192915050565b60025490565b60006102528484846104d5565b6001600160a01b03841660009081526001602052604081208161027361041d565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fb565b60405180910390fd5b6102d3856102cb61041d565b858403610421565b506001949350505050565b601290565b60006102366102f061041d565b8484600160006102fe61041d565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103329190610928565b610421565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f9061094c565b6000806001600061037461041d565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c05760405162461bcd60e51b81526004016102b6906108cc565b6103d46103cb61041d565b85858403610421565b5060019392505050565b60006102366103eb61041d565b84846104d5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104475760405162461bcd60e51b81526004016102b690610888565b6001600160a01b03821661046d5760405162461bcd60e51b81526004016102b690610773565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104c8908590610911565b60405180910390a3505050565b6001600160a01b0383166104fb5760405162461bcd60e51b81526004016102b690610843565b6001600160a01b0382166105215760405162461bcd60e51b81526004016102b690610730565b61052c8383836105ff565b6001600160a01b038316600090815260208190526040902054818110156105655760405162461bcd60e51b81526004016102b6906107b5565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061059c908490610928565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105e69190610911565b60405180910390a36105f98484846105ff565b50505050565b505050565b80356001600160a01b038116811461035157600080fd5b60006020828403121561062c578081fd5b61063582610604565b9392505050565b6000806040838503121561064e578081fd5b61065783610604565b915061066560208401610604565b90509250929050565b600080600060608486031215610682578081fd5b61068b84610604565b925061069960208501610604565b9150604084013590509250925092565b600080604083850312156106bb578182fd5b6106c483610604565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b81811015610709578581018301518582016040015282016106ed565b8181111561071a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561094757634e487b7160e01b81526011600452602481fd5b500190565b60028104600182168061096057607f821691505b6020821081141561098157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a2f011cebcf3c19653db1e8172b837dbb410bce6c6143a014e599950ea8e68d664736f6c63430008000033",
  "bytecodeSha1": "46265bce5d8560fb57eeebb5352b753a38dd6665",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "ERC20",
  "coverageMap": {
    "branches": {
      "0": {
        "ERC20._approve": {
          "32": [
            10093,
            10112,
            true
          ],
          "33": [
            10171,
            10192,
            true
          ]
        },
        "ERC20._transfer": {
          "34": [
            7400,
            7420,
            true
          ],
          "35": [
            7480,
            7503,
            true
          ],
          "36": [
            7671,
            7694,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "31": [
            6574,
            6609,
            true
          ]
        },
        "ERC20.transferFrom": {
          "30": [
            5091,
            5117,
            true
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {}
    },
    "statements": {
      "0": {
        "ERC20._approve": {
          "18": [
            10085,
            10153
          ],
          "19": [
            10163,
            10231
          ],
          "20": [
            10242,
            10278
          ],
          "21": [
            10288,
            10325
          ]
        },
        "ERC20._transfer": {
          "22": [
            7392,
            7462
          ],
          "23": [
            7472,
            7543
          ],
          "24": [
            7554,
            7601
          ],
          "25": [
            7663,
            7737
          ],
          "26": [
            7771,
            7813
          ],
          "27": [
            7833,
            7863
          ],
          "28": [
            7874,
            7914
          ],
          "29": [
            7925,
            7971
          ]
        },
        "ERC20.allowance": {
          "16": [
            4002,
            4036
          ]
        },
        "ERC20.approve": {
          "1": [
            4280,
            4319
          ],
          "2": [
            4329,
            4340
          ]
        },
        "ERC20.balanceOf": {
          "10": [
            3429,
            3454
          ]
        },
        "ERC20.decimals": {
          "8": [
            3096,
            3105
          ]
        },
        "ERC20.decreaseAllowance": {
          "12": [
            6566,
            6651
          ],
          "13": [
            6685,
            6752
          ],
          "14": [
            6773,
            6784
          ]
        },
        "ERC20.increaseAllowance": {
          "9": [
            5791,
            5871
          ]
        },
        "ERC20.name": {
          "0": [
            2163,
            2175
          ]
        },
        "ERC20.symbol": {
          "11": [
            2376,
            2390
          ]
        },
        "ERC20.totalSupply": {
          "3": [
            3252,
            3271
          ]
        },
        "ERC20.transfer": {
          "15": [
            3766,
            3808
          ]
        },
        "ERC20.transferFrom": {
          "4": [
            4966,
            5002
          ],
          "5": [
            5083,
            5162
          ],
          "6": [
            5196,
            5253
          ],
          "7": [
            5274,
            5285
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {
        "Context._msgSender": {
          "17": [
            659,
            676
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.1/Context",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.3.1/IERC20Metadata"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c391906106dd565b60405180910390f35b6100df6100da3660046106a9565b610222565b6040516100c391906106d2565b6100f461023f565b6040516100c39190610911565b6100df61010f36600461066e565b610245565b61011c6102de565b6040516100c3919061091a565b6100df6101373660046106a9565b6102e3565b6100f461014a36600461061b565b610337565b6100b6610356565b6100df6101653660046106a9565b610365565b6100df6101783660046106a9565b6103de565b6100f461018b36600461063c565b6103f2565b60606003805461019f9061094c565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb9061094c565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b600061023661022f61041d565b8484610421565b50600192915050565b60025490565b60006102528484846104d5565b6001600160a01b03841660009081526001602052604081208161027361041d565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102bf5760405162461bcd60e51b81526004016102b6906107fb565b60405180910390fd5b6102d3856102cb61041d565b858403610421565b506001949350505050565b601290565b60006102366102f061041d565b8484600160006102fe61041d565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103329190610928565b610421565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f9061094c565b6000806001600061037461041d565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103c05760405162461bcd60e51b81526004016102b6906108cc565b6103d46103cb61041d565b85858403610421565b5060019392505050565b60006102366103eb61041d565b84846104d5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104475760405162461bcd60e51b81526004016102b690610888565b6001600160a01b03821661046d5760405162461bcd60e51b81526004016102b690610773565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104c8908590610911565b60405180910390a3505050565b6001600160a01b0383166104fb5760405162461bcd60e51b81526004016102b690610843565b6001600160a01b0382166105215760405162461bcd60e51b81526004016102b690610730565b61052c8383836105ff565b6001600160a01b038316600090815260208190526040902054818110156105655760405162461bcd60e51b81526004016102b6906107b5565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061059c908490610928565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105e69190610911565b60405180910390a36105f98484846105ff565b50505050565b505050565b80356001600160a01b038116811461035157600080fd5b60006020828403121561062c578081fd5b61063582610604565b9392505050565b6000806040838503121561064e578081fd5b61065783610604565b915061066560208401610604565b90509250929050565b600080600060608486031215610682578081fd5b61068b84610604565b925061069960208501610604565b9150604084013590509250925092565b600080604083850312156106bb578182fd5b6106c483610604565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b81811015610709578581018301518582016040015282016106ed565b8181111561071a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b6000821982111561094757634e487b7160e01b81526011600452602481fd5b500190565b60028104600182168061096057607f821691505b6020821081141561098157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a2f011cebcf3c19653db1e8172b837dbb410bce6c6143a014e599950ea8e68d664736f6c63430008000033",
  "deployedSourceMap": "1331:10416:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2084:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4181:166;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3172:106::-;;;:::i;:::-;;;;;;;:::i;4814:478::-;;;;;;:::i;:::-;;:::i;3021:91::-;;;:::i;:::-;;;;;;;:::i;5687:212::-;;;;;;:::i;:::-;;:::i;3336:125::-;;;;;;:::i;:::-;;:::i;2295:102::-;;;:::i;6386:405::-;;;;;;:::i;:::-;;:::i;3664:172::-;;;;;;:::i;:::-;;:::i;3894:149::-;;;;;;:::i;:::-;;:::i;2084:98::-;2138:13;2170:5;2163:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2084:98;:::o;4181:166::-;4264:4;4280:39;4289:12;:10;:12::i;:::-;4303:7;4312:6;4280:8;:39::i;:::-;-1:-1:-1;4336:4:0;4181:166;;;;:::o;3172:106::-;3259:12;;3172:106;:::o;4814:478::-;4950:4;4966:36;4976:6;4984:9;4995:6;4966:9;:36::i;:::-;-1:-1:-1;;;;;5040:19:0;;5013:24;5040:19;;;:11;:19;;;;;5013:24;5060:12;:10;:12::i;:::-;-1:-1:-1;;;;;5040:33:0;-1:-1:-1;;;;;5040:33:0;;;;;;;;;;;;;5013:60;;5111:6;5091:16;:26;;5083:79;;;;-1:-1:-1;;;5083:79:0;;;;;;;:::i;:::-;;;;;;;;;5196:57;5205:6;5213:12;:10;:12::i;:::-;5246:6;5227:16;:25;5196:8;:57::i;:::-;-1:-1:-1;5281:4:0;;4814:478;-1:-1:-1;;;;4814:478:0:o;3021:91::-;3103:2;3021:91;:::o;5687:212::-;5775:4;5791:80;5800:12;:10;:12::i;:::-;5814:7;5860:10;5823:11;:25;5835:12;:10;:12::i;:::-;-1:-1:-1;;;;;5823:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;5823:25:0;;;:34;;;;;;;;;;:47;;;;:::i;:::-;5791:8;:80::i;3336:125::-;-1:-1:-1;;;;;3436:18:0;;3410:7;3436:18;;;;;;;;;;;3336:125;;;;:::o;2295:102::-;2351:13;2383:7;2376:14;;;;;:::i;6386:405::-;6479:4;6495:24;6522:11;:25;6534:12;:10;:12::i;:::-;-1:-1:-1;;;;;6522:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;6522:25:0;;;:34;;;;;;;;;;;-1:-1:-1;6574:35:0;;;;6566:85;;;;-1:-1:-1;;;6566:85:0;;;;;;;:::i;:::-;6685:67;6694:12;:10;:12::i;:::-;6708:7;6736:15;6717:16;:34;6685:8;:67::i;:::-;-1:-1:-1;6780:4:0;;6386:405;-1:-1:-1;;;6386:405:0:o;3664:172::-;3750:4;3766:42;3776:12;:10;:12::i;:::-;3790:9;3801:6;3766:9;:42::i;3894:149::-;-1:-1:-1;;;;;4009:18:0;;;3983:7;4009:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3894:149::o;587:96:3:-;666:10;587:96;:::o;9962:370:0:-;-1:-1:-1;;;;;10093:19:0;;10085:68;;;;-1:-1:-1;;;10085:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;10171:21:0;;10163:68;;;;-1:-1:-1;;;10163:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;10242:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10293:32;;;;;10272:6;;10293:32;:::i;:::-;;;;;;;;9962:370;;;:::o;7265:713::-;-1:-1:-1;;;;;7400:20:0;;7392:70;;;;-1:-1:-1;;;7392:70:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;7480:23:0;;7472:71;;;;-1:-1:-1;;;7472:71:0;;;;;;;:::i;:::-;7554:47;7575:6;7583:9;7594:6;7554:20;:47::i;:::-;-1:-1:-1;;;;;7636:17:0;;7612:21;7636:17;;;;;;;;;;;7671:23;;;;7663:74;;;;-1:-1:-1;;;7663:74:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;7771:17:0;;;:9;:17;;;;;;;;;;;7791:22;;;7771:42;;7833:20;;;;;;;;:30;;7807:6;;7771:9;7833:30;;7807:6;;7833:30;:::i;:::-;;;;;;;;7896:9;-1:-1:-1;;;;;7879:35:0;7888:6;-1:-1:-1;;;;;7879:35:0;;7907:6;7879:35;;;;;;:::i;:::-;;;;;;;;7925:46;7945:6;7953:9;7964:6;7925:19;:46::i;:::-;7265:713;;;;:::o;10916:121::-;;;;:::o;14:175:5:-;84:20;;-1:-1:-1;;;;;133:31:5;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:5:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:5:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:5;2052:15;-1:-1:-1;;2048:29:5;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:5:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:5;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:5;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:402::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:34;3176:2;3161:18;;3154:62;-1:-1:-1;;;3247:2:5;3232:18;;3225:36;3293:3;3278:19;;3075:228::o;3308:404::-;3510:2;3492:21;;;3549:2;3529:18;;;3522:30;3588:34;3583:2;3568:18;;3561:62;-1:-1:-1;;;3654:2:5;3639:18;;3632:38;3702:3;3687:19;;3482:230::o;3717:401::-;3919:2;3901:21;;;3958:2;3938:18;;;3931:30;3997:34;3992:2;3977:18;;3970:62;-1:-1:-1;;;4063:2:5;4048:18;;4041:35;4108:3;4093:19;;3891:227::o;4123:400::-;4325:2;4307:21;;;4364:2;4344:18;;;4337:30;4403:34;4398:2;4383:18;;4376:62;-1:-1:-1;;;4469:2:5;4454:18;;4447:34;4513:3;4498:19;;4297:226::o;4528:401::-;4730:2;4712:21;;;4769:2;4749:18;;;4742:30;4808:34;4803:2;4788:18;;4781:62;-1:-1:-1;;;4874:2:5;4859:18;;4852:35;4919:3;4904:19;;4702:227::o;4934:177::-;5080:25;;;5068:2;5053:18;;5035:76::o;5116:184::-;5288:4;5276:17;;;;5258:36;;5246:2;5231:18;;5213:87::o;5305:229::-;;5376:1;5372:6;5369:1;5366:13;5363:2;;;-1:-1:-1;;;5402:33:5;;5458:4;5455:1;5448:15;5488:4;5409:3;5476:17;5363:2;-1:-1:-1;5519:9:5;;5353:181::o;5539:380::-;5624:1;5614:12;;5671:1;5661:12;;;5682:2;;5736:4;5728:6;5724:17;5714:27;;5682:2;5789;5781:6;5778:14;5758:18;5755:38;5752:2;;;5835:10;5830:3;5826:20;5823:1;5816:31;5870:4;5867:1;5860:15;5898:4;5895:1;5888:15;5752:2;;5594:325;;;:::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1331,
    11747
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6D2 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x23F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x911 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x66E JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x91A JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x2E3 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x337 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x356 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x6A9 JUMP JUMPDEST PUSH2 0x3DE JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x63C JUMP JUMPDEST PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x94C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x94C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x22F PUSH2 0x41D JUMP JUMPDEST DUP5 DUP5 PUSH2 0x421 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252 DUP5 DUP5 DUP5 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 PUSH2 0x273 PUSH2 0x41D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x2BF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2D3 DUP6 PUSH2 0x2CB PUSH2 0x41D JUMP JUMPDEST DUP6 DUP5 SUB PUSH2 0x421 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x2F0 PUSH2 0x41D JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x2FE PUSH2 0x41D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP12 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x928 JUMP JUMPDEST PUSH2 0x421 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x374 PUSH2 0x41D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP9 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x3C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x8CC JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0x3CB PUSH2 0x41D JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 0x421 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x236 PUSH2 0x3EB PUSH2 0x41D JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x447 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x888 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x46D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x773 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x4C8 SWAP1 DUP6 SWAP1 PUSH2 0x911 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x843 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x521 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x730 JUMP JUMPDEST PUSH2 0x52C DUP4 DUP4 DUP4 PUSH2 0x5FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x565 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B6 SWAP1 PUSH2 0x7B5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x59C SWAP1 DUP5 SWAP1 PUSH2 0x928 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x5E6 SWAP2 SWAP1 PUSH2 0x911 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x5F9 DUP5 DUP5 DUP5 PUSH2 0x5FF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x62C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x635 DUP3 PUSH2 0x604 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x64E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x657 DUP4 PUSH2 0x604 JUMP JUMPDEST SWAP2 POP PUSH2 0x665 PUSH1 0x20 DUP5 ADD PUSH2 0x604 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x682 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x68B DUP5 PUSH2 0x604 JUMP JUMPDEST SWAP3 POP PUSH2 0x699 PUSH1 0x20 DUP6 ADD PUSH2 0x604 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6BB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6C4 DUP4 PUSH2 0x604 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x709 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6ED JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x71A JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x28 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x40 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x947 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x960 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x981 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 CREATE GT 0xCE 0xBC RETURN 0xC1 SWAP7 MSTORE8 0xDB 0x1E DUP2 PUSH19 0xB837DBB410BCE6C6143A014E599950EA8E68D6 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "GT",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x129"
    },
    "53": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13C"
    },
    "64": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "75": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x157"
    },
    "86": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "94": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16A"
    },
    "97": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "98": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17D"
    },
    "108": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "109": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA9"
    },
    "112": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMP",
      "path": "0"
    },
    "113": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "114": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "143": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEC"
    },
    "146": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "147": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "148": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "154": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "158": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "159": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "EQ",
      "path": "0"
    },
    "165": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "169": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "170": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "DUP1",
      "path": "0"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1331,
        11747
      ],
      "op": "REVERT",
      "path": "0"
    },
    "174": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "175": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB6"
    },
    "178": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x190"
    },
    "181": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMP",
      "path": "0"
    },
    "182": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "183": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "185": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "186": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "189": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "190": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "191": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6DD"
    },
    "194": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMP",
      "path": "0"
    },
    "195": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "196": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "198": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "199": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "DUP1",
      "path": "0"
    },
    "200": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "201": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SUB",
      "path": "0"
    },
    "202": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "203": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "RETURN",
      "path": "0"
    },
    "204": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "205": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "208": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "211": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "212": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "214": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A9"
    },
    "217": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "218": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "219": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x222"
    },
    "222": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "223": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "224": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "226": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "227": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "230": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "231": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "232": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6D2"
    },
    "235": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "236": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "237": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF4"
    },
    "240": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x23F"
    },
    "243": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMP",
      "path": "0"
    },
    "244": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "245": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "247": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "248": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "251": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "252": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "253": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x911"
    },
    "256": {
      "fn": "ERC20.totalSupply",
      "jump": "i",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMP",
      "path": "0"
    },
    "257": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "261": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10F"
    },
    "264": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "265": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "267": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66E"
    },
    "270": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMP",
      "path": "0"
    },
    "271": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "272": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x245"
    },
    "275": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMP",
      "path": "0"
    },
    "276": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "277": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11C"
    },
    "280": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2DE"
    },
    "283": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMP",
      "path": "0"
    },
    "284": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "285": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "287": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "288": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "291": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "292": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "293": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x91A"
    },
    "296": {
      "fn": "ERC20.decimals",
      "jump": "i",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMP",
      "path": "0"
    },
    "297": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "298": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "301": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x137"
    },
    "304": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "305": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "307": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A9"
    },
    "310": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5687,
        5899
      ],
      "op": "JUMP",
      "path": "0"
    },
    "311": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "312": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E3"
    },
    "315": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5687,
        5899
      ],
      "op": "JUMP",
      "path": "0"
    },
    "316": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "317": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF4"
    },
    "320": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14A"
    },
    "323": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "324": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "326": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x61B"
    },
    "329": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "330": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "331": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x337"
    },
    "334": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "335": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2397
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "336": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2397
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB6"
    },
    "339": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2397
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x356"
    },
    "342": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2295,
        2397
      ],
      "op": "JUMP",
      "path": "0"
    },
    "343": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "344": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "347": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x165"
    },
    "350": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "351": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "353": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A9"
    },
    "356": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMP",
      "path": "0"
    },
    "357": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "358": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x365"
    },
    "361": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMP",
      "path": "0"
    },
    "362": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "363": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "366": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x178"
    },
    "369": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "370": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "372": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6A9"
    },
    "375": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3664,
        3836
      ],
      "op": "JUMP",
      "path": "0"
    },
    "376": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "377": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3DE"
    },
    "380": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3664,
        3836
      ],
      "op": "JUMP",
      "path": "0"
    },
    "381": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "382": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF4"
    },
    "385": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18B"
    },
    "388": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "389": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "391": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x63C"
    },
    "394": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMP",
      "path": "0"
    },
    "395": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "396": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F2"
    },
    "399": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMP",
      "path": "0"
    },
    "400": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "401": {
      "fn": "ERC20.name",
      "offset": [
        2138,
        2151
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "403": {
      "fn": "ERC20.name",
      "offset": [
        2170,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x3"
    },
    "405": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "406": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "407": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19F"
    },
    "410": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x94C"
    },
    "414": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "415": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "416": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "417": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "419": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "420": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "422": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "423": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "424": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DIV",
      "path": "0"
    },
    "425": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MUL",
      "path": "0"
    },
    "426": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "429": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "432": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "433": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "434": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "435": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "437": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "438": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "439": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "440": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "441": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "442": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "443": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "444": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "445": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "447": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "448": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP3",
      "path": "0"
    },
    "449": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "450": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "451": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CB"
    },
    "454": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "455": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x94C"
    },
    "458": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "459": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "460": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "461": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "462": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x218"
    },
    "465": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "466": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "467": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "469": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "LT",
      "path": "0"
    },
    "470": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1ED"
    },
    "473": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "474": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "477": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "478": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP4",
      "path": "0"
    },
    "479": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "480": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DIV",
      "path": "0"
    },
    "481": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MUL",
      "path": "0"
    },
    "482": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP4",
      "path": "0"
    },
    "483": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "484": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "485": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "487": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "488": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "489": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x218"
    },
    "492": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMP",
      "path": "0"
    },
    "493": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "494": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP3",
      "path": "0"
    },
    "495": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "496": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "497": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "498": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "500": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "501": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "503": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "505": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "506": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "507": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "508": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "509": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "510": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP2",
      "path": "0"
    },
    "511": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "512": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "513": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "515": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "516": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "517": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "519": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "520": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP1",
      "path": "0"
    },
    "521": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP4",
      "path": "0"
    },
    "522": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "GT",
      "path": "0"
    },
    "523": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FB"
    },
    "526": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "527": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP3",
      "path": "0"
    },
    "528": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "529": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SUB",
      "path": "0"
    },
    "530": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "532": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "AND",
      "path": "0"
    },
    "533": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "DUP3",
      "path": "0"
    },
    "534": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "ADD",
      "path": "0"
    },
    "535": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "536": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "537": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "538": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "539": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "540": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "541": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "542": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "543": {
      "fn": "ERC20.name",
      "offset": [
        2163,
        2175
      ],
      "op": "POP",
      "path": "0"
    },
    "544": {
      "fn": "ERC20.name",
      "offset": [
        2084,
        2182
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "545": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2084,
        2182
      ],
      "op": "JUMP",
      "path": "0"
    },
    "546": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "547": {
      "fn": "ERC20.approve",
      "offset": [
        4264,
        4268
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "549": {
      "fn": "ERC20.approve",
      "offset": [
        4280,
        4319
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0x236"
    },
    "552": {
      "fn": "ERC20.approve",
      "offset": [
        4289,
        4301
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x22F"
    },
    "555": {
      "fn": "ERC20.approve",
      "offset": [
        4289,
        4299
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "558": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4289,
        4301
      ],
      "op": "JUMP",
      "path": "0"
    },
    "559": {
      "fn": "ERC20.approve",
      "offset": [
        4289,
        4301
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "560": {
      "fn": "ERC20.approve",
      "offset": [
        4303,
        4310
      ],
      "op": "DUP5",
      "path": "0"
    },
    "561": {
      "fn": "ERC20.approve",
      "offset": [
        4312,
        4318
      ],
      "op": "DUP5",
      "path": "0"
    },
    "562": {
      "fn": "ERC20.approve",
      "offset": [
        4280,
        4288
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x421"
    },
    "565": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4280,
        4319
      ],
      "op": "JUMP",
      "path": "0"
    },
    "566": {
      "fn": "ERC20.approve",
      "offset": [
        4280,
        4319
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "fn": "ERC20.approve",
      "offset": [
        4336,
        4340
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x1"
    },
    "570": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "571": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "572": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "POP",
      "path": "0"
    },
    "573": {
      "fn": "ERC20.approve",
      "offset": [
        4181,
        4347
      ],
      "op": "POP",
      "path": "0"
    },
    "574": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4181,
        4347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "575": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "576": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3259,
        3271
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x2"
    },
    "578": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3259,
        3271
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "579": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3172,
        3278
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "580": {
      "fn": "ERC20.totalSupply",
      "jump": "o",
      "offset": [
        3172,
        3278
      ],
      "op": "JUMP",
      "path": "0"
    },
    "581": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "582": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4950,
        4954
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "584": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        5002
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 4,
      "value": "0x252"
    },
    "587": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4976,
        4982
      ],
      "op": "DUP5",
      "path": "0"
    },
    "588": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4984,
        4993
      ],
      "op": "DUP5",
      "path": "0"
    },
    "589": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4995,
        5001
      ],
      "op": "DUP5",
      "path": "0"
    },
    "590": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        4975
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D5"
    },
    "593": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4966,
        5002
      ],
      "op": "JUMP",
      "path": "0"
    },
    "594": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        5002
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "SUB"
    },
    "603": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "DUP5",
      "path": "0"
    },
    "604": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "AND",
      "path": "0"
    },
    "605": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5013,
        5037
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "607": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "608": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "DUP2",
      "path": "0"
    },
    "609": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "610": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5051
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "612": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "614": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "615": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "617": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "DUP2",
      "path": "0"
    },
    "618": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5059
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "619": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5013,
        5037
      ],
      "op": "DUP2",
      "path": "0"
    },
    "620": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5060,
        5072
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x273"
    },
    "623": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5060,
        5070
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "626": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5060,
        5072
      ],
      "op": "JUMP",
      "path": "0"
    },
    "627": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5060,
        5072
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "634": {
      "op": "SHL"
    },
    "635": {
      "op": "SUB"
    },
    "636": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "AND",
      "path": "0"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "643": {
      "op": "SHL"
    },
    "644": {
      "op": "SUB"
    },
    "645": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "AND",
      "path": "0"
    },
    "646": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "DUP2",
      "path": "0"
    },
    "647": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "648": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "650": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "ADD",
      "path": "0"
    },
    "651": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "652": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "DUP2",
      "path": "0"
    },
    "653": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "654": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "656": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "ADD",
      "path": "0"
    },
    "657": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "659": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "660": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5040,
        5073
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "661": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5013,
        5073
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "662": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5013,
        5073
      ],
      "op": "POP",
      "path": "0"
    },
    "663": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5111,
        5117
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 5
    },
    "664": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5091,
        5107
      ],
      "op": "DUP2",
      "path": "0"
    },
    "665": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5091,
        5117
      ],
      "op": "LT",
      "path": "0"
    },
    "666": {
      "branch": 30,
      "fn": "ERC20.transferFrom",
      "offset": [
        5091,
        5117
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "667": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2BF"
    },
    "670": {
      "branch": 30,
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "671": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "673": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "674": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "DUP2",
      "path": "0"
    },
    "682": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "683": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "685": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "ADD",
      "path": "0"
    },
    "686": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "689": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "690": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7FB"
    },
    "693": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5083,
        5162
      ],
      "op": "JUMP",
      "path": "0"
    },
    "694": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "695": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "697": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "698": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "DUP1",
      "path": "0"
    },
    "699": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "700": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "SUB",
      "path": "0"
    },
    "701": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "702": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "703": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5083,
        5162
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "704": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5253
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 6,
      "value": "0x2D3"
    },
    "707": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5205,
        5211
      ],
      "op": "DUP6",
      "path": "0"
    },
    "708": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5213,
        5225
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CB"
    },
    "711": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5213,
        5223
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "714": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5213,
        5225
      ],
      "op": "JUMP",
      "path": "0"
    },
    "715": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5213,
        5225
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "716": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5246,
        5252
      ],
      "op": "DUP6",
      "path": "0"
    },
    "717": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5227,
        5243
      ],
      "op": "DUP5",
      "path": "0"
    },
    "718": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5227,
        5252
      ],
      "op": "SUB",
      "path": "0"
    },
    "719": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5204
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x421"
    },
    "722": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5196,
        5253
      ],
      "op": "JUMP",
      "path": "0"
    },
    "723": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5196,
        5253
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "724": {
      "op": "POP"
    },
    "725": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5281,
        5285
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 7,
      "value": "0x1"
    },
    "727": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5281,
        5285
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "728": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4814,
        5292
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "729": {
      "op": "POP"
    },
    "730": {
      "op": "POP"
    },
    "731": {
      "op": "POP"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4814,
        5292
      ],
      "op": "JUMP",
      "path": "0"
    },
    "734": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "735": {
      "fn": "ERC20.decimals",
      "offset": [
        3103,
        3105
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 8,
      "value": "0x12"
    },
    "737": {
      "fn": "ERC20.decimals",
      "offset": [
        3021,
        3112
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "738": {
      "fn": "ERC20.decimals",
      "jump": "o",
      "offset": [
        3021,
        3112
      ],
      "op": "JUMP",
      "path": "0"
    },
    "739": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5687,
        5899
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "740": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5775,
        5779
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "742": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5791,
        5871
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 9,
      "value": "0x236"
    },
    "745": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5800,
        5812
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F0"
    },
    "748": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5800,
        5810
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "751": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5800,
        5812
      ],
      "op": "JUMP",
      "path": "0"
    },
    "752": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5800,
        5812
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "753": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5814,
        5821
      ],
      "op": "DUP5",
      "path": "0"
    },
    "754": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5860,
        5870
      ],
      "op": "DUP5",
      "path": "0"
    },
    "755": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5834
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "757": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "759": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5835,
        5847
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2FE"
    },
    "762": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5835,
        5845
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "765": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5835,
        5847
      ],
      "op": "JUMP",
      "path": "0"
    },
    "766": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5835,
        5847
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "767": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "769": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "771": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "773": {
      "op": "SHL"
    },
    "774": {
      "op": "SUB"
    },
    "775": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "776": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP2",
      "path": "0"
    },
    "777": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "AND",
      "path": "0"
    },
    "778": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP3",
      "path": "0"
    },
    "779": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "780": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "782": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP1",
      "path": "0"
    },
    "783": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP4",
      "path": "0"
    },
    "784": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "ADD",
      "path": "0"
    },
    "785": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "786": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "787": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "788": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "789": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "791": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "792": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP3",
      "path": "0"
    },
    "793": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "ADD",
      "path": "0"
    },
    "794": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "796": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "797": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "DUP2",
      "path": "0"
    },
    "798": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5848
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "799": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "800": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "DUP12",
      "path": "0"
    },
    "801": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "AND",
      "path": "0"
    },
    "802": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "DUP2",
      "path": "0"
    },
    "803": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "804": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "805": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "806": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "807": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "808": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5857
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "809": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5870
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x332"
    },
    "812": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5870
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "813": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5870
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "814": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5870
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x928"
    },
    "817": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5823,
        5870
      ],
      "op": "JUMP",
      "path": "0"
    },
    "818": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5823,
        5870
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "819": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5791,
        5799
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x421"
    },
    "822": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5791,
        5871
      ],
      "op": "JUMP",
      "path": "0"
    },
    "823": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "828": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "830": {
      "op": "SHL"
    },
    "831": {
      "op": "SUB"
    },
    "832": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 10
    },
    "833": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "AND",
      "path": "0"
    },
    "834": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3410,
        3417
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "836": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "837": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "DUP2",
      "path": "0"
    },
    "838": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "839": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "841": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "DUP2",
      "path": "0"
    },
    "842": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "843": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "844": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "846": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "847": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "848": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3436,
        3454
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "849": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "850": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "851": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "852": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3336,
        3461
      ],
      "op": "POP",
      "path": "0"
    },
    "853": {
      "fn": "ERC20.balanceOf",
      "jump": "o",
      "offset": [
        3336,
        3461
      ],
      "op": "JUMP",
      "path": "0"
    },
    "854": {
      "fn": "ERC20.symbol",
      "offset": [
        2295,
        2397
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "855": {
      "fn": "ERC20.symbol",
      "offset": [
        2351,
        2364
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "857": {
      "fn": "ERC20.symbol",
      "offset": [
        2383,
        2390
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 11,
      "value": "0x4"
    },
    "859": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2390
      ],
      "op": "DUP1",
      "path": "0"
    },
    "860": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2390
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "861": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19F"
    },
    "864": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2390
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "865": {
      "fn": "ERC20.symbol",
      "offset": [
        2376,
        2390
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x94C"
    },
    "868": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2376,
        2390
      ],
      "op": "JUMP",
      "path": "0"
    },
    "869": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "870": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6479,
        6483
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "872": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6495,
        6519
      ],
      "op": "DUP1",
      "path": "0"
    },
    "873": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6533
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "875": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "877": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6534,
        6546
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x374"
    },
    "880": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6534,
        6544
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "883": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6534,
        6546
      ],
      "op": "JUMP",
      "path": "0"
    },
    "884": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6534,
        6546
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "889": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "891": {
      "op": "SHL"
    },
    "892": {
      "op": "SUB"
    },
    "893": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "894": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP2",
      "path": "0"
    },
    "895": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "AND",
      "path": "0"
    },
    "896": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP3",
      "path": "0"
    },
    "897": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "898": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "900": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP1",
      "path": "0"
    },
    "901": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP4",
      "path": "0"
    },
    "902": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "ADD",
      "path": "0"
    },
    "903": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "904": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "905": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "906": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "907": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "909": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "910": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP3",
      "path": "0"
    },
    "911": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "ADD",
      "path": "0"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "914": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "915": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "DUP2",
      "path": "0"
    },
    "916": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6547
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "917": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "918": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "DUP9",
      "path": "0"
    },
    "919": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "AND",
      "path": "0"
    },
    "920": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "DUP2",
      "path": "0"
    },
    "921": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "922": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "923": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "924": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "925": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "926": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "927": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6522,
        6556
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "928": {
      "op": "POP"
    },
    "929": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6574,
        6609
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 12
    },
    "930": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6574,
        6609
      ],
      "op": "DUP2",
      "path": "0"
    },
    "931": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6574,
        6609
      ],
      "op": "LT",
      "path": "0"
    },
    "932": {
      "branch": 31,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6574,
        6609
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "933": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C0"
    },
    "936": {
      "branch": 31,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "937": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "939": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "940": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "944": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "946": {
      "op": "SHL"
    },
    "947": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "DUP2",
      "path": "0"
    },
    "948": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "949": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "951": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "ADD",
      "path": "0"
    },
    "952": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "955": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "956": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8CC"
    },
    "959": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6566,
        6651
      ],
      "op": "JUMP",
      "path": "0"
    },
    "960": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6566,
        6651
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "961": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6685,
        6752
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 13,
      "value": "0x3D4"
    },
    "964": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6694,
        6706
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3CB"
    },
    "967": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6694,
        6704
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "970": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6694,
        6706
      ],
      "op": "JUMP",
      "path": "0"
    },
    "971": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6694,
        6706
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "972": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6708,
        6715
      ],
      "op": "DUP6",
      "path": "0"
    },
    "973": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6736,
        6751
      ],
      "op": "DUP6",
      "path": "0"
    },
    "974": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6717,
        6733
      ],
      "op": "DUP5",
      "path": "0"
    },
    "975": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "SUB",
      "path": "0"
    },
    "976": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6685,
        6693
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x421"
    },
    "979": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6685,
        6752
      ],
      "op": "JUMP",
      "path": "0"
    },
    "980": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6685,
        6752
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "981": {
      "op": "POP"
    },
    "982": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6780,
        6784
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 14,
      "value": "0x1"
    },
    "984": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6780,
        6784
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "985": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6386,
        6791
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "986": {
      "op": "POP"
    },
    "987": {
      "op": "POP"
    },
    "988": {
      "op": "POP"
    },
    "989": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6386,
        6791
      ],
      "op": "JUMP",
      "path": "0"
    },
    "990": {
      "fn": "ERC20.transfer",
      "offset": [
        3664,
        3836
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "991": {
      "fn": "ERC20.transfer",
      "offset": [
        3750,
        3754
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "993": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3808
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 15,
      "value": "0x236"
    },
    "996": {
      "fn": "ERC20.transfer",
      "offset": [
        3776,
        3788
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3EB"
    },
    "999": {
      "fn": "ERC20.transfer",
      "offset": [
        3776,
        3786
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41D"
    },
    "1002": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3776,
        3788
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1003": {
      "fn": "ERC20.transfer",
      "offset": [
        3776,
        3788
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1004": {
      "fn": "ERC20.transfer",
      "offset": [
        3790,
        3799
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1005": {
      "fn": "ERC20.transfer",
      "offset": [
        3801,
        3807
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1006": {
      "fn": "ERC20.transfer",
      "offset": [
        3766,
        3775
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D5"
    },
    "1009": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3766,
        3808
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1010": {
      "fn": "ERC20.allowance",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1015": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1017": {
      "op": "SHL"
    },
    "1018": {
      "op": "SUB"
    },
    "1019": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 16
    },
    "1020": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1021": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "AND",
      "path": "0"
    },
    "1022": {
      "fn": "ERC20.allowance",
      "offset": [
        3983,
        3990
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1024": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1025": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1026": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1027": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4020
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1029": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1031": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1032": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1033": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1034": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1036": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1037": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1038": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4027
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1039": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1040": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1041": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1042": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "AND",
      "path": "0"
    },
    "1043": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1044": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1045": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1046": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1047": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1048": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1049": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1050": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1051": {
      "fn": "ERC20.allowance",
      "offset": [
        4009,
        4036
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1052": {
      "fn": "ERC20.allowance",
      "jump": "o",
      "offset": [
        3894,
        4043
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1053": {
      "fn": "Context._msgSender",
      "offset": [
        587,
        683
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1054": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "3",
      "statement": 17
    },
    "1055": {
      "fn": "Context._msgSender",
      "offset": [
        587,
        683
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1056": {
      "fn": "Context._msgSender",
      "jump": "o",
      "offset": [
        587,
        683
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1057": {
      "fn": "ERC20._approve",
      "offset": [
        9962,
        10332
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1058": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1060": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1064": {
      "op": "SHL"
    },
    "1065": {
      "op": "SUB"
    },
    "1066": {
      "fn": "ERC20._approve",
      "offset": [
        10093,
        10112
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 18
    },
    "1067": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        10093,
        10112
      ],
      "op": "AND",
      "path": "0"
    },
    "1068": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x447"
    },
    "1071": {
      "branch": 32,
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1072": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1074": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1075": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1079": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1081": {
      "op": "SHL"
    },
    "1082": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1083": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1084": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1086": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "ADD",
      "path": "0"
    },
    "1087": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "1090": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1091": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x888"
    },
    "1094": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10085,
        10153
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1095": {
      "fn": "ERC20._approve",
      "offset": [
        10085,
        10153
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1096": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1098": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1102": {
      "op": "SHL"
    },
    "1103": {
      "op": "SUB"
    },
    "1104": {
      "fn": "ERC20._approve",
      "offset": [
        10171,
        10192
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 19
    },
    "1105": {
      "branch": 33,
      "fn": "ERC20._approve",
      "offset": [
        10171,
        10192
      ],
      "op": "AND",
      "path": "0"
    },
    "1106": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x46D"
    },
    "1109": {
      "branch": 33,
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1110": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1112": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1113": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1119": {
      "op": "SHL"
    },
    "1120": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1121": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1122": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1124": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "ADD",
      "path": "0"
    },
    "1125": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "1128": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1129": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x773"
    },
    "1132": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10163,
        10231
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1133": {
      "fn": "ERC20._approve",
      "offset": [
        10163,
        10231
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1134": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1140": {
      "op": "SHL"
    },
    "1141": {
      "op": "SUB"
    },
    "1142": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 20
    },
    "1143": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1144": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "AND",
      "path": "0"
    },
    "1145": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1147": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1148": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1149": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1150": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10253
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1152": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1154": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1155": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1156": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1157": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1159": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1160": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1161": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10260
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1162": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1163": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "DUP8",
      "path": "0"
    },
    "1164": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "AND",
      "path": "0"
    },
    "1165": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1166": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1167": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1168": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1169": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1170": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1171": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1172": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1173": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1174": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1175": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10269
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1176": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10278
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1177": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10278
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1178": {
      "fn": "ERC20._approve",
      "offset": [
        10242,
        10278
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1179": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "MLOAD",
      "path": "0",
      "statement": 21
    },
    "1180": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1213": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1214": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4C8"
    },
    "1217": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1218": {
      "fn": "ERC20._approve",
      "offset": [
        10272,
        10278
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1219": {
      "fn": "ERC20._approve",
      "offset": [
        10272,
        10278
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1220": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x911"
    },
    "1223": {
      "fn": "ERC20._approve",
      "jump": "i",
      "offset": [
        10293,
        10325
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1224": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1225": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1227": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1228": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1229": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1230": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "SUB",
      "path": "0"
    },
    "1231": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1232": {
      "fn": "ERC20._approve",
      "offset": [
        10293,
        10325
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1233": {
      "fn": "ERC20._approve",
      "offset": [
        9962,
        10332
      ],
      "op": "POP",
      "path": "0"
    },
    "1234": {
      "fn": "ERC20._approve",
      "offset": [
        9962,
        10332
      ],
      "op": "POP",
      "path": "0"
    },
    "1235": {
      "fn": "ERC20._approve",
      "offset": [
        9962,
        10332
      ],
      "op": "POP",
      "path": "0"
    },
    "1236": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9962,
        10332
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1237": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7978
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1238": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1244": {
      "op": "SHL"
    },
    "1245": {
      "op": "SUB"
    },
    "1246": {
      "fn": "ERC20._transfer",
      "offset": [
        7400,
        7420
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 22
    },
    "1247": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7400,
        7420
      ],
      "op": "AND",
      "path": "0"
    },
    "1248": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4FB"
    },
    "1251": {
      "branch": 34,
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1252": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1254": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1255": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1259": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1261": {
      "op": "SHL"
    },
    "1262": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1263": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1264": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1266": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "ADD",
      "path": "0"
    },
    "1267": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "1270": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1271": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x843"
    },
    "1274": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7392,
        7462
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1275": {
      "fn": "ERC20._transfer",
      "offset": [
        7392,
        7462
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1280": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1282": {
      "op": "SHL"
    },
    "1283": {
      "op": "SUB"
    },
    "1284": {
      "fn": "ERC20._transfer",
      "offset": [
        7480,
        7503
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 23
    },
    "1285": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7480,
        7503
      ],
      "op": "AND",
      "path": "0"
    },
    "1286": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x521"
    },
    "1289": {
      "branch": 35,
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1290": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1292": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1293": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1297": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1299": {
      "op": "SHL"
    },
    "1300": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1301": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1302": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1304": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "ADD",
      "path": "0"
    },
    "1305": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "1308": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1309": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x730"
    },
    "1312": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7472,
        7543
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1313": {
      "fn": "ERC20._transfer",
      "offset": [
        7472,
        7543
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1314": {
      "fn": "ERC20._transfer",
      "offset": [
        7554,
        7601
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 24,
      "value": "0x52C"
    },
    "1317": {
      "fn": "ERC20._transfer",
      "offset": [
        7575,
        7581
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1318": {
      "fn": "ERC20._transfer",
      "offset": [
        7583,
        7592
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1319": {
      "fn": "ERC20._transfer",
      "offset": [
        7594,
        7600
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1320": {
      "fn": "ERC20._transfer",
      "offset": [
        7554,
        7574
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5FF"
    },
    "1323": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7554,
        7601
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1324": {
      "fn": "ERC20._transfer",
      "offset": [
        7554,
        7601
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1334": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "AND",
      "path": "0"
    },
    "1335": {
      "fn": "ERC20._transfer",
      "offset": [
        7612,
        7633
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1337": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1338": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1339": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1340": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1342": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1343": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1344": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1345": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1347": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1348": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1349": {
      "fn": "ERC20._transfer",
      "offset": [
        7636,
        7653
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1350": {
      "fn": "ERC20._transfer",
      "offset": [
        7671,
        7694
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 25
    },
    "1351": {
      "fn": "ERC20._transfer",
      "offset": [
        7671,
        7694
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1352": {
      "fn": "ERC20._transfer",
      "offset": [
        7671,
        7694
      ],
      "op": "LT",
      "path": "0"
    },
    "1353": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7671,
        7694
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1354": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x565"
    },
    "1357": {
      "branch": 36,
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1358": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1360": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1361": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1365": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1367": {
      "op": "SHL"
    },
    "1368": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1369": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1370": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1372": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "ADD",
      "path": "0"
    },
    "1373": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B6"
    },
    "1376": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1377": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7B5"
    },
    "1380": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7663,
        7737
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1381": {
      "fn": "ERC20._transfer",
      "offset": [
        7663,
        7737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1382": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1384": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1388": {
      "op": "SHL"
    },
    "1389": {
      "op": "SUB"
    },
    "1390": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 26
    },
    "1391": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1392": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "AND",
      "path": "0"
    },
    "1393": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1395": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1396": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1397": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1398": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1400": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1401": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1402": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1403": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1405": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1406": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1407": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7788
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1408": {
      "fn": "ERC20._transfer",
      "offset": [
        7791,
        7813
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1409": {
      "fn": "ERC20._transfer",
      "offset": [
        7791,
        7813
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1410": {
      "fn": "ERC20._transfer",
      "offset": [
        7791,
        7813
      ],
      "op": "SUB",
      "path": "0"
    },
    "1411": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7813
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1412": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7813
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1413": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "SWAP2",
      "path": "0",
      "statement": 27
    },
    "1414": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "DUP6",
      "path": "0"
    },
    "1415": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "AND",
      "path": "0"
    },
    "1416": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1417": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1418": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1419": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1420": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7853
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1421": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1422": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1423": {
      "fn": "ERC20._transfer",
      "offset": [
        7807,
        7813
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1424": {
      "fn": "ERC20._transfer",
      "offset": [
        7807,
        7813
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1425": {
      "fn": "ERC20._transfer",
      "offset": [
        7771,
        7780
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1426": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x59C"
    },
    "1429": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1430": {
      "fn": "ERC20._transfer",
      "offset": [
        7807,
        7813
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1431": {
      "fn": "ERC20._transfer",
      "offset": [
        7807,
        7813
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1432": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x928"
    },
    "1435": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7833,
        7863
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1436": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1437": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1438": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "POP",
      "path": "0"
    },
    "1439": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "POP",
      "path": "0"
    },
    "1440": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1441": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1442": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1443": {
      "fn": "ERC20._transfer",
      "offset": [
        7833,
        7863
      ],
      "op": "POP",
      "path": "0"
    },
    "1444": {
      "fn": "ERC20._transfer",
      "offset": [
        7896,
        7905
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 28
    },
    "1445": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1447": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1451": {
      "op": "SHL"
    },
    "1452": {
      "op": "SUB"
    },
    "1453": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "AND",
      "path": "0"
    },
    "1454": {
      "fn": "ERC20._transfer",
      "offset": [
        7888,
        7894
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1455": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1457": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1459": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1461": {
      "op": "SHL"
    },
    "1462": {
      "op": "SUB"
    },
    "1463": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "AND",
      "path": "0"
    },
    "1464": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1497": {
      "fn": "ERC20._transfer",
      "offset": [
        7907,
        7913
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1498": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1500": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1501": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5E6"
    },
    "1504": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1505": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1506": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x911"
    },
    "1509": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7879,
        7914
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1510": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1511": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1513": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1514": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1515": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1516": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "SUB",
      "path": "0"
    },
    "1517": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1518": {
      "fn": "ERC20._transfer",
      "offset": [
        7879,
        7914
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1519": {
      "fn": "ERC20._transfer",
      "offset": [
        7925,
        7971
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 29,
      "value": "0x5F9"
    },
    "1522": {
      "fn": "ERC20._transfer",
      "offset": [
        7945,
        7951
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1523": {
      "fn": "ERC20._transfer",
      "offset": [
        7953,
        7962
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1524": {
      "fn": "ERC20._transfer",
      "offset": [
        7964,
        7970
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1525": {
      "fn": "ERC20._transfer",
      "offset": [
        7925,
        7944
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5FF"
    },
    "1528": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7925,
        7971
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1529": {
      "fn": "ERC20._transfer",
      "offset": [
        7925,
        7971
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1530": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7978
      ],
      "op": "POP",
      "path": "0"
    },
    "1531": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7978
      ],
      "op": "POP",
      "path": "0"
    },
    "1532": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7978
      ],
      "op": "POP",
      "path": "0"
    },
    "1533": {
      "fn": "ERC20._transfer",
      "offset": [
        7265,
        7978
      ],
      "op": "POP",
      "path": "0"
    },
    "1534": {
      "fn": "ERC20._transfer",
      "jump": "o",
      "offset": [
        7265,
        7978
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1535": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10916,
        11037
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1536": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10916,
        11037
      ],
      "op": "POP",
      "path": "0"
    },
    "1537": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10916,
        11037
      ],
      "op": "POP",
      "path": "0"
    },
    "1538": {
      "fn": "ERC20._beforeTokenTransfer",
      "offset": [
        10916,
        11037
      ],
      "op": "POP",
      "path": "0"
    },
    "1539": {
      "fn": "ERC20._beforeTokenTransfer",
      "jump": "o",
      "offset": [
        10916,
        11037
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1540": {
      "op": "JUMPDEST"
    },
    "1541": {
      "op": "DUP1"
    },
    "1542": {
      "op": "CALLDATALOAD"
    },
    "1543": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1549": {
      "op": "SHL"
    },
    "1550": {
      "op": "SUB"
    },
    "1551": {
      "op": "DUP2"
    },
    "1552": {
      "op": "AND"
    },
    "1553": {
      "op": "DUP2"
    },
    "1554": {
      "op": "EQ"
    },
    "1555": {
      "op": "PUSH2",
      "value": "0x351"
    },
    "1558": {
      "op": "JUMPI"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1561": {
      "op": "DUP1"
    },
    "1562": {
      "op": "REVERT"
    },
    "1563": {
      "op": "JUMPDEST"
    },
    "1564": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1568": {
      "op": "DUP3"
    },
    "1569": {
      "op": "DUP5"
    },
    "1570": {
      "op": "SUB"
    },
    "1571": {
      "op": "SLT"
    },
    "1572": {
      "op": "ISZERO"
    },
    "1573": {
      "op": "PUSH2",
      "value": "0x62C"
    },
    "1576": {
      "op": "JUMPI"
    },
    "1577": {
      "op": "DUP1"
    },
    "1578": {
      "op": "DUP2"
    },
    "1579": {
      "op": "REVERT"
    },
    "1580": {
      "op": "JUMPDEST"
    },
    "1581": {
      "op": "PUSH2",
      "value": "0x635"
    },
    "1584": {
      "op": "DUP3"
    },
    "1585": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1588": {
      "jump": "i",
      "op": "JUMP"
    },
    "1589": {
      "op": "JUMPDEST"
    },
    "1590": {
      "op": "SWAP4"
    },
    "1591": {
      "op": "SWAP3"
    },
    "1592": {
      "op": "POP"
    },
    "1593": {
      "op": "POP"
    },
    "1594": {
      "op": "POP"
    },
    "1595": {
      "jump": "o",
      "op": "JUMP"
    },
    "1596": {
      "op": "JUMPDEST"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1599": {
      "op": "DUP1"
    },
    "1600": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1602": {
      "op": "DUP4"
    },
    "1603": {
      "op": "DUP6"
    },
    "1604": {
      "op": "SUB"
    },
    "1605": {
      "op": "SLT"
    },
    "1606": {
      "op": "ISZERO"
    },
    "1607": {
      "op": "PUSH2",
      "value": "0x64E"
    },
    "1610": {
      "op": "JUMPI"
    },
    "1611": {
      "op": "DUP1"
    },
    "1612": {
      "op": "DUP2"
    },
    "1613": {
      "op": "REVERT"
    },
    "1614": {
      "op": "JUMPDEST"
    },
    "1615": {
      "op": "PUSH2",
      "value": "0x657"
    },
    "1618": {
      "op": "DUP4"
    },
    "1619": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1622": {
      "jump": "i",
      "op": "JUMP"
    },
    "1623": {
      "op": "JUMPDEST"
    },
    "1624": {
      "op": "SWAP2"
    },
    "1625": {
      "op": "POP"
    },
    "1626": {
      "op": "PUSH2",
      "value": "0x665"
    },
    "1629": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1631": {
      "op": "DUP5"
    },
    "1632": {
      "op": "ADD"
    },
    "1633": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1636": {
      "jump": "i",
      "op": "JUMP"
    },
    "1637": {
      "op": "JUMPDEST"
    },
    "1638": {
      "op": "SWAP1"
    },
    "1639": {
      "op": "POP"
    },
    "1640": {
      "op": "SWAP3"
    },
    "1641": {
      "op": "POP"
    },
    "1642": {
      "op": "SWAP3"
    },
    "1643": {
      "op": "SWAP1"
    },
    "1644": {
      "op": "POP"
    },
    "1645": {
      "jump": "o",
      "op": "JUMP"
    },
    "1646": {
      "op": "JUMPDEST"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1649": {
      "op": "DUP1"
    },
    "1650": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1652": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1654": {
      "op": "DUP5"
    },
    "1655": {
      "op": "DUP7"
    },
    "1656": {
      "op": "SUB"
    },
    "1657": {
      "op": "SLT"
    },
    "1658": {
      "op": "ISZERO"
    },
    "1659": {
      "op": "PUSH2",
      "value": "0x682"
    },
    "1662": {
      "op": "JUMPI"
    },
    "1663": {
      "op": "DUP1"
    },
    "1664": {
      "op": "DUP2"
    },
    "1665": {
      "op": "REVERT"
    },
    "1666": {
      "op": "JUMPDEST"
    },
    "1667": {
      "op": "PUSH2",
      "value": "0x68B"
    },
    "1670": {
      "op": "DUP5"
    },
    "1671": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1674": {
      "jump": "i",
      "op": "JUMP"
    },
    "1675": {
      "op": "JUMPDEST"
    },
    "1676": {
      "op": "SWAP3"
    },
    "1677": {
      "op": "POP"
    },
    "1678": {
      "op": "PUSH2",
      "value": "0x699"
    },
    "1681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1683": {
      "op": "DUP6"
    },
    "1684": {
      "op": "ADD"
    },
    "1685": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1688": {
      "jump": "i",
      "op": "JUMP"
    },
    "1689": {
      "op": "JUMPDEST"
    },
    "1690": {
      "op": "SWAP2"
    },
    "1691": {
      "op": "POP"
    },
    "1692": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1694": {
      "op": "DUP5"
    },
    "1695": {
      "op": "ADD"
    },
    "1696": {
      "op": "CALLDATALOAD"
    },
    "1697": {
      "op": "SWAP1"
    },
    "1698": {
      "op": "POP"
    },
    "1699": {
      "op": "SWAP3"
    },
    "1700": {
      "op": "POP"
    },
    "1701": {
      "op": "SWAP3"
    },
    "1702": {
      "op": "POP"
    },
    "1703": {
      "op": "SWAP3"
    },
    "1704": {
      "jump": "o",
      "op": "JUMP"
    },
    "1705": {
      "op": "JUMPDEST"
    },
    "1706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1708": {
      "op": "DUP1"
    },
    "1709": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1711": {
      "op": "DUP4"
    },
    "1712": {
      "op": "DUP6"
    },
    "1713": {
      "op": "SUB"
    },
    "1714": {
      "op": "SLT"
    },
    "1715": {
      "op": "ISZERO"
    },
    "1716": {
      "op": "PUSH2",
      "value": "0x6BB"
    },
    "1719": {
      "op": "JUMPI"
    },
    "1720": {
      "op": "DUP2"
    },
    "1721": {
      "op": "DUP3"
    },
    "1722": {
      "op": "REVERT"
    },
    "1723": {
      "op": "JUMPDEST"
    },
    "1724": {
      "op": "PUSH2",
      "value": "0x6C4"
    },
    "1727": {
      "op": "DUP4"
    },
    "1728": {
      "op": "PUSH2",
      "value": "0x604"
    },
    "1731": {
      "jump": "i",
      "op": "JUMP"
    },
    "1732": {
      "op": "JUMPDEST"
    },
    "1733": {
      "op": "SWAP5"
    },
    "1734": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1736": {
      "op": "SWAP4"
    },
    "1737": {
      "op": "SWAP1"
    },
    "1738": {
      "op": "SWAP4"
    },
    "1739": {
      "op": "ADD"
    },
    "1740": {
      "op": "CALLDATALOAD"
    },
    "1741": {
      "op": "SWAP4"
    },
    "1742": {
      "op": "POP"
    },
    "1743": {
      "op": "POP"
    },
    "1744": {
      "op": "POP"
    },
    "1745": {
      "jump": "o",
      "op": "JUMP"
    },
    "1746": {
      "op": "JUMPDEST"
    },
    "1747": {
      "op": "SWAP1"
    },
    "1748": {
      "op": "ISZERO"
    },
    "1749": {
      "op": "ISZERO"
    },
    "1750": {
      "op": "DUP2"
    },
    "1751": {
      "op": "MSTORE"
    },
    "1752": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1754": {
      "op": "ADD"
    },
    "1755": {
      "op": "SWAP1"
    },
    "1756": {
      "jump": "o",
      "op": "JUMP"
    },
    "1757": {
      "op": "JUMPDEST"
    },
    "1758": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1760": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1762": {
      "op": "DUP1"
    },
    "1763": {
      "op": "DUP4"
    },
    "1764": {
      "op": "MSTORE"
    },
    "1765": {
      "op": "DUP4"
    },
    "1766": {
      "op": "MLOAD"
    },
    "1767": {
      "op": "DUP1"
    },
    "1768": {
      "op": "DUP3"
    },
    "1769": {
      "op": "DUP6"
    },
    "1770": {
      "op": "ADD"
    },
    "1771": {
      "op": "MSTORE"
    },
    "1772": {
      "op": "DUP3"
    },
    "1773": {
      "op": "JUMPDEST"
    },
    "1774": {
      "op": "DUP2"
    },
    "1775": {
      "op": "DUP2"
    },
    "1776": {
      "op": "LT"
    },
    "1777": {
      "op": "ISZERO"
    },
    "1778": {
      "op": "PUSH2",
      "value": "0x709"
    },
    "1781": {
      "op": "JUMPI"
    },
    "1782": {
      "op": "DUP6"
    },
    "1783": {
      "op": "DUP2"
    },
    "1784": {
      "op": "ADD"
    },
    "1785": {
      "op": "DUP4"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "MLOAD"
    },
    "1788": {
      "op": "DUP6"
    },
    "1789": {
      "op": "DUP3"
    },
    "1790": {
      "op": "ADD"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1793": {
      "op": "ADD"
    },
    "1794": {
      "op": "MSTORE"
    },
    "1795": {
      "op": "DUP3"
    },
    "1796": {
      "op": "ADD"
    },
    "1797": {
      "op": "PUSH2",
      "value": "0x6ED"
    },
    "1800": {
      "op": "JUMP"
    },
    "1801": {
      "op": "JUMPDEST"
    },
    "1802": {
      "op": "DUP2"
    },
    "1803": {
      "op": "DUP2"
    },
    "1804": {
      "op": "GT"
    },
    "1805": {
      "op": "ISZERO"
    },
    "1806": {
      "op": "PUSH2",
      "value": "0x71A"
    },
    "1809": {
      "op": "JUMPI"
    },
    "1810": {
      "op": "DUP4"
    },
    "1811": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1813": {
      "op": "DUP4"
    },
    "1814": {
      "op": "DUP8"
    },
    "1815": {
      "op": "ADD"
    },
    "1816": {
      "op": "ADD"
    },
    "1817": {
      "op": "MSTORE"
    },
    "1818": {
      "op": "JUMPDEST"
    },
    "1819": {
      "op": "POP"
    },
    "1820": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1822": {
      "op": "ADD"
    },
    "1823": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1825": {
      "op": "NOT"
    },
    "1826": {
      "op": "AND"
    },
    "1827": {
      "op": "SWAP3"
    },
    "1828": {
      "op": "SWAP1"
    },
    "1829": {
      "op": "SWAP3"
    },
    "1830": {
      "op": "ADD"
    },
    "1831": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1833": {
      "op": "ADD"
    },
    "1834": {
      "op": "SWAP4"
    },
    "1835": {
      "op": "SWAP3"
    },
    "1836": {
      "op": "POP"
    },
    "1837": {
      "op": "POP"
    },
    "1838": {
      "op": "POP"
    },
    "1839": {
      "jump": "o",
      "op": "JUMP"
    },
    "1840": {
      "op": "JUMPDEST"
    },
    "1841": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1843": {
      "op": "DUP1"
    },
    "1844": {
      "op": "DUP3"
    },
    "1845": {
      "op": "MSTORE"
    },
    "1846": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1848": {
      "op": "SWAP1"
    },
    "1849": {
      "op": "DUP3"
    },
    "1850": {
      "op": "ADD"
    },
    "1851": {
      "op": "MSTORE"
    },
    "1852": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1885": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1887": {
      "op": "DUP3"
    },
    "1888": {
      "op": "ADD"
    },
    "1889": {
      "op": "MSTORE"
    },
    "1890": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1896": {
      "op": "SHL"
    },
    "1897": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1899": {
      "op": "DUP3"
    },
    "1900": {
      "op": "ADD"
    },
    "1901": {
      "op": "MSTORE"
    },
    "1902": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1904": {
      "op": "ADD"
    },
    "1905": {
      "op": "SWAP1"
    },
    "1906": {
      "jump": "o",
      "op": "JUMP"
    },
    "1907": {
      "op": "JUMPDEST"
    },
    "1908": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1910": {
      "op": "DUP1"
    },
    "1911": {
      "op": "DUP3"
    },
    "1912": {
      "op": "MSTORE"
    },
    "1913": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1915": {
      "op": "SWAP1"
    },
    "1916": {
      "op": "DUP3"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MSTORE"
    },
    "1919": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1952": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1954": {
      "op": "DUP3"
    },
    "1955": {
      "op": "ADD"
    },
    "1956": {
      "op": "MSTORE"
    },
    "1957": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1960": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1962": {
      "op": "SHL"
    },
    "1963": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1965": {
      "op": "DUP3"
    },
    "1966": {
      "op": "ADD"
    },
    "1967": {
      "op": "MSTORE"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1970": {
      "op": "ADD"
    },
    "1971": {
      "op": "SWAP1"
    },
    "1972": {
      "jump": "o",
      "op": "JUMP"
    },
    "1973": {
      "op": "JUMPDEST"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1976": {
      "op": "DUP1"
    },
    "1977": {
      "op": "DUP3"
    },
    "1978": {
      "op": "MSTORE"
    },
    "1979": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1981": {
      "op": "SWAP1"
    },
    "1982": {
      "op": "DUP3"
    },
    "1983": {
      "op": "ADD"
    },
    "1984": {
      "op": "MSTORE"
    },
    "1985": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2020": {
      "op": "DUP3"
    },
    "2021": {
      "op": "ADD"
    },
    "2022": {
      "op": "MSTORE"
    },
    "2023": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "2030": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2032": {
      "op": "SHL"
    },
    "2033": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2035": {
      "op": "DUP3"
    },
    "2036": {
      "op": "ADD"
    },
    "2037": {
      "op": "MSTORE"
    },
    "2038": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2040": {
      "op": "ADD"
    },
    "2041": {
      "op": "SWAP1"
    },
    "2042": {
      "jump": "o",
      "op": "JUMP"
    },
    "2043": {
      "op": "JUMPDEST"
    },
    "2044": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2046": {
      "op": "DUP1"
    },
    "2047": {
      "op": "DUP3"
    },
    "2048": {
      "op": "MSTORE"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "2051": {
      "op": "SWAP1"
    },
    "2052": {
      "op": "DUP3"
    },
    "2053": {
      "op": "ADD"
    },
    "2054": {
      "op": "MSTORE"
    },
    "2055": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "2088": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2090": {
      "op": "DUP3"
    },
    "2091": {
      "op": "ADD"
    },
    "2092": {
      "op": "MSTORE"
    },
    "2093": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "2102": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2104": {
      "op": "SHL"
    },
    "2105": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2107": {
      "op": "DUP3"
    },
    "2108": {
      "op": "ADD"
    },
    "2109": {
      "op": "MSTORE"
    },
    "2110": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2112": {
      "op": "ADD"
    },
    "2113": {
      "op": "SWAP1"
    },
    "2114": {
      "jump": "o",
      "op": "JUMP"
    },
    "2115": {
      "op": "JUMPDEST"
    },
    "2116": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2118": {
      "op": "DUP1"
    },
    "2119": {
      "op": "DUP3"
    },
    "2120": {
      "op": "MSTORE"
    },
    "2121": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2123": {
      "op": "SWAP1"
    },
    "2124": {
      "op": "DUP3"
    },
    "2125": {
      "op": "ADD"
    },
    "2126": {
      "op": "MSTORE"
    },
    "2127": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2162": {
      "op": "DUP3"
    },
    "2163": {
      "op": "ADD"
    },
    "2164": {
      "op": "MSTORE"
    },
    "2165": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2173": {
      "op": "SHL"
    },
    "2174": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2176": {
      "op": "DUP3"
    },
    "2177": {
      "op": "ADD"
    },
    "2178": {
      "op": "MSTORE"
    },
    "2179": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2181": {
      "op": "ADD"
    },
    "2182": {
      "op": "SWAP1"
    },
    "2183": {
      "jump": "o",
      "op": "JUMP"
    },
    "2184": {
      "op": "JUMPDEST"
    },
    "2185": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2187": {
      "op": "DUP1"
    },
    "2188": {
      "op": "DUP3"
    },
    "2189": {
      "op": "MSTORE"
    },
    "2190": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2192": {
      "op": "SWAP1"
    },
    "2193": {
      "op": "DUP3"
    },
    "2194": {
      "op": "ADD"
    },
    "2195": {
      "op": "MSTORE"
    },
    "2196": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "2229": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2231": {
      "op": "DUP3"
    },
    "2232": {
      "op": "ADD"
    },
    "2233": {
      "op": "MSTORE"
    },
    "2234": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "2239": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2241": {
      "op": "SHL"
    },
    "2242": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2244": {
      "op": "DUP3"
    },
    "2245": {
      "op": "ADD"
    },
    "2246": {
      "op": "MSTORE"
    },
    "2247": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2249": {
      "op": "ADD"
    },
    "2250": {
      "op": "SWAP1"
    },
    "2251": {
      "jump": "o",
      "op": "JUMP"
    },
    "2252": {
      "op": "JUMPDEST"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2255": {
      "op": "DUP1"
    },
    "2256": {
      "op": "DUP3"
    },
    "2257": {
      "op": "MSTORE"
    },
    "2258": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2260": {
      "op": "SWAP1"
    },
    "2261": {
      "op": "DUP3"
    },
    "2262": {
      "op": "ADD"
    },
    "2263": {
      "op": "MSTORE"
    },
    "2264": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2299": {
      "op": "DUP3"
    },
    "2300": {
      "op": "ADD"
    },
    "2301": {
      "op": "MSTORE"
    },
    "2302": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "2308": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2310": {
      "op": "SHL"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2313": {
      "op": "DUP3"
    },
    "2314": {
      "op": "ADD"
    },
    "2315": {
      "op": "MSTORE"
    },
    "2316": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2318": {
      "op": "ADD"
    },
    "2319": {
      "op": "SWAP1"
    },
    "2320": {
      "jump": "o",
      "op": "JUMP"
    },
    "2321": {
      "op": "JUMPDEST"
    },
    "2322": {
      "op": "SWAP1"
    },
    "2323": {
      "op": "DUP2"
    },
    "2324": {
      "op": "MSTORE"
    },
    "2325": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2327": {
      "op": "ADD"
    },
    "2328": {
      "op": "SWAP1"
    },
    "2329": {
      "jump": "o",
      "op": "JUMP"
    },
    "2330": {
      "op": "JUMPDEST"
    },
    "2331": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2333": {
      "op": "SWAP2"
    },
    "2334": {
      "op": "SWAP1"
    },
    "2335": {
      "op": "SWAP2"
    },
    "2336": {
      "op": "AND"
    },
    "2337": {
      "op": "DUP2"
    },
    "2338": {
      "op": "MSTORE"
    },
    "2339": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2341": {
      "op": "ADD"
    },
    "2342": {
      "op": "SWAP1"
    },
    "2343": {
      "jump": "o",
      "op": "JUMP"
    },
    "2344": {
      "op": "JUMPDEST"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2347": {
      "op": "DUP3"
    },
    "2348": {
      "op": "NOT"
    },
    "2349": {
      "op": "DUP3"
    },
    "2350": {
      "op": "GT"
    },
    "2351": {
      "op": "ISZERO"
    },
    "2352": {
      "op": "PUSH2",
      "value": "0x947"
    },
    "2355": {
      "op": "JUMPI"
    },
    "2356": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2361": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2363": {
      "op": "SHL"
    },
    "2364": {
      "op": "DUP2"
    },
    "2365": {
      "op": "MSTORE"
    },
    "2366": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2368": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2370": {
      "op": "MSTORE"
    },
    "2371": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2373": {
      "op": "DUP2"
    },
    "2374": {
      "op": "REVERT"
    },
    "2375": {
      "op": "JUMPDEST"
    },
    "2376": {
      "op": "POP"
    },
    "2377": {
      "op": "ADD"
    },
    "2378": {
      "op": "SWAP1"
    },
    "2379": {
      "jump": "o",
      "op": "JUMP"
    },
    "2380": {
      "op": "JUMPDEST"
    },
    "2381": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "2383": {
      "op": "DUP2"
    },
    "2384": {
      "op": "DIV"
    },
    "2385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2387": {
      "op": "DUP3"
    },
    "2388": {
      "op": "AND"
    },
    "2389": {
      "op": "DUP1"
    },
    "2390": {
      "op": "PUSH2",
      "value": "0x960"
    },
    "2393": {
      "op": "JUMPI"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2396": {
      "op": "DUP3"
    },
    "2397": {
      "op": "AND"
    },
    "2398": {
      "op": "SWAP2"
    },
    "2399": {
      "op": "POP"
    },
    "2400": {
      "op": "JUMPDEST"
    },
    "2401": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2403": {
      "op": "DUP3"
    },
    "2404": {
      "op": "LT"
    },
    "2405": {
      "op": "DUP2"
    },
    "2406": {
      "op": "EQ"
    },
    "2407": {
      "op": "ISZERO"
    },
    "2408": {
      "op": "PUSH2",
      "value": "0x981"
    },
    "2411": {
      "op": "JUMPI"
    },
    "2412": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2417": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2419": {
      "op": "SHL"
    },
    "2420": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2422": {
      "op": "MSTORE"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2425": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2427": {
      "op": "MSTORE"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2430": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2432": {
      "op": "REVERT"
    },
    "2433": {
      "op": "JUMPDEST"
    },
    "2434": {
      "op": "POP"
    },
    "2435": {
      "op": "SWAP2"
    },
    "2436": {
      "op": "SWAP1"
    },
    "2437": {
      "op": "POP"
    },
    "2438": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "8dcf47d054dbef74601cd18742b080c8eb62c60e",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n",
  "sourceMap": "1331:10416:0:-:0;;;1906:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1972:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1995:17:0;;;;:7;;:17;;;;;:::i;:::-;;1906:113;;1331:10416;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1331:10416:0;;;-1:-1:-1;1331:10416:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:5;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:5;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:5;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:5;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:5;80:815;-1:-1:-1;;;;;80:815:5:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:5;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;1331:10416:0;;;;;;",
  "sourcePath": "/home/shcyster/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.1/contracts/token/ERC20/ERC20.sol",
  "type": "contract"
}